let express,handlebars,mongoose,cookieParser,path,dotenv,Evento;_480‍.x([["app",()=>app]]);_480‍.w("express",[["default",["express"],function(v){express=v}]]);_480‍.w("express-handlebars",[["*",null,function(v){handlebars=v}]]);_480‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_480‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_480‍.w("path",[["default",["path"],function(v){path=v}]]);_480‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_480‍.w("./models/Event.js",[["default",["Evento"],function(v){Evento=v}]]);







const app = express();



function verificarEventos() {
  Evento.find({}, (err, eventos) => {
      if (err) {
          _480‍.g.console.error(err);
          return;
      }

      const fechaActual = new Date();

      eventos.forEach((evento) => {
          if (fechaActual > evento.fechaTermino) {
              evento.activo = false; 
              evento.save(); 
          }
      });
  });
}


setInterval(verificarEventos, 60000); 




dotenv.config();

app.engine(
  "hbs",
  handlebars.engine({
    extname: "hbs",
    layoutsDir: `${__dirname}/views/layouts`,
    partialsDir: `${__dirname}/views/partials`,
    defaultLayout: "index",
    helpers: {
      UserID: (req) => req.user._id,
      Votes: (evento) => evento.votes,
      Options: (evento) => evento.options,
      customId: (evento) => evento._id,
      customTitle: (evento) => evento.title,
       customDescription: (evento) => evento.description,
       customDate: (evento) => evento.date,
       customFechaTermino: (evento) => evento.fechaTermino,
       customActivo: (evento) => { return evento.activo;},
       isActivo: (activo) => {
        return activo === true;
    },
    
      
       customVotos: (evento) => evento.votos,
    },

    
    
  })
);
app.set("view engine", "hbs");
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, "public")));



mongoose
  .connect(process.env.URL_MONGO)
  .then(() => {
    console.log("Connected to MongoDB Atlas");
  })
  .catch((error) => {
    console.log("Error connecting to MongoDB Atlas");
    _480‍.g.console.log(error);
  });

